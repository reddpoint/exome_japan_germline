# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


"""
Variant calling with Freebayes:
https://github.com/ekg/freebayes

Needs the following tools available in PATH:
freebayes
vcf-concat from vcftools

For usage, include this in your workflow.

Expects a global variable config
(see https://bitbucket.org/johanneskoester/snakemake/wiki/Documentation#markdown-header-configuration)
of at least the
following structure, assuming that the desired reference sequence is some genome
to be found under the given path, and two units A and B have been sequenced.
The heterozygosity parameters show the default values for homo sapiens.
The reference FASTA file needs to be indexed with samtools faidx.


{
    "references": {
        "genome": "path/to/genome.fasta"
    },
    "samples": {
        "A": ["A"],
        "B": ["B"]
    },
    "units": {
        "A":
            ["path/to/A_R1.fastq.gz", "path/to/A_R2.fastq.gz"],
        "B":
            ["path/to/B.fastq.gz"]
    },
    "ploidy": 2,
    "heterozygosity": 0.001
}

Note the separation between samples and units that allows to have more than
one sequencing run for each sample, or multiple lanes per sample.
"""


__author__ = "Johannes KÃ¶ster (http://johanneskoester.bitbucket.org)"
__license__ = "MIT"


import csv


def _get_ref(wildcards):
    return config["references"][wildcards.reference]


def _get_chroms(pattern):
    def apply(wildcards):
        ref = _get_ref(wildcards)
        with open(ref + ".fai") as f:
            chroms = [l[0] for l in csv.reader(f, delimiter="\t")]
        return expand(
            pattern,
            reference=wildcards.reference,
            chrom=chroms)
    return apply


def _get_units(pattern):
    def apply(wildcards):
        return expand(
            pattern, reference=wildcards.reference,
            unit=[
                unit for sample in config["samples"].values()
                for unit in sample
            ])
    return apply


rule freebayes:
    input:
        _get_units("mapping/{reference}/units/{unit}.sorted.bam.bai"),
        ref=_get_ref,
        bams=_get_units("mapping/{reference}/units/{unit}.sorted.bam")
    output:
        "variant_calling/{reference}/all.{chrom}.vcf"
    params:
        custom=config.get("params_freebayes", "")
    log:
        "variant_calling/log/{reference}/all.{chrom}.genotype.log"
    shell:
        "freebayes -r {wildcards.chrom} "
        "--ploidy {config[ploidy]} --fasta-reference {input.ref} "
        "--theta {config[heterozygosity]} {params.custom} "
        "{input.bams} > {output} 2> {log}"


rule freebayes_merge:
    input:
        _get_chroms("variant_calling/{reference}/all.{chrom}.vcf")
    output:
        "variant_calling/{reference}/all.vcf"
    shell:
        "vcf-concat {input} > {output}"
