# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


"""
GATK variant recalibration as described in

Needs at least GATK 3.0, available in your PATH as "gatk".

For usage, include this in your workflow.

Expects a global variable config
(see https://bitbucket.org/johanneskoester/snakemake/wiki/Documentation#markdown-header-configuration)
of at least the
following structure, assuming that the desired reference sequence is some genome
to be found under the given path.

{
    "references": {
        "genome": "path/to/genome.fasta"
    },
    "known_variants": {
        "dbsnp": "path/to/dbsnp.vcf",
        "hapmap": "path/to/hapmap_3.3.vcf",
        "g1k": "path/to/1000G_phase1.snps.high_confidence.vcf",
        "omni": "path/to/1000G_omni2.5.vcf",
        "mills": "path/to/Mills_and_1000G_gold_standard.indels.vcf"
    }
}
"""


__author__ = "Johannes KÃ¶ster (http://johanneskoester.bitbucket.org)"
__license__ = "MIT"


def _get_ref(wildcards):
    return config["references"][wildcards.reference]

## omit -an DP from both SNP and INDEL mode when using non-whole genome data
## omit InbreddingCoeff if <10 genomes or using related family

def _get_recal_params(wildcards):
    if wildcards.type == "snp":
        return (
            "-mode SNP "
            "-an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR -an InbreedingCoeff"
            "-resource:hapmap,known=false,training=true,truth=true,prior=15.0 {hapmap} "
            "-resource:omni,known=false,training=true,truth=true,prior=12.0 {omni} "
            "-resource:1000G,known=false,training=true,truth=false,prior=10.0 {g1k} "
            "-resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {dbsnp}"
        ).format(**config["known_variants"])
    else:
        return (
            "-mode INDEL"
            "-an QD -an FS -an SOR -an ReadPosRankSum -an MQRankSum -an InbreedingCoeff"
            "-resource:mills,known=true,training=true,truth=true,prior=12.0 {mills}"
            "-resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {dbsnp}"
        ).format(**config["known_variants"])

rule gatk_variant_recalibration:
    input:
        config["known_variants"].values(),
        ref=config["references"],
        vcf="gatk/variant_calling/all.vcf"
    output:
        recal=temp("lscratch/variant_calling/{prefix}.{type,(snp|indel)}.recal"),
        tranches=temp("lscratch/variant_calling/{prefix}.{type,(snp|indel)}.tranches"),
        plotting=temp("lscratch/variant_calling/{prefix}.{type,(snp|indel)}.plotting.R")
    params:
        _get_recal_params,
        config.get("params_gatk", "")
    log:
        "variant_calling/log/{prefix}.{type}_recalibrate_info.log"
    threads: 8
    shell:
        """
        module load GATK
        java -Xmx8g -Djava.io.tmpdir=/lscratch/{{prefix}} -jar $GATK_HOME/GenomeAnalysisTK.jar \
        -T VariantRecalibrator \
        -R {input.ref} \
        -input {input.vcf} \
        {params} \
        -nt {threads} \
        -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
        -recalFile {output.recal} \
        -tranchesFile {output.tranches} \
        -rscriptFile {output.plotting} >& {log}
        """



rule gatk_apply_variant_recalibration:
    input:
        ref=config["references"],
        vcf="lscratch/variant_calling/{prefix}.vcf",
        recal="lscratch/variant_calling/{prefix}.{type}.recal",
        tranches="lscratch/variant_calling/{prefix}.{type}.tranches"
    output:
        "variant_calling/{prefix}.{type,(snp|indel)}_recalibrated.vcf"
    params:
        mode=lambda wildcards: wildcards.type.upper()
    log:
        "variant_calling/log/{prefix}.{type}_recalibrate.log"
    threads: 8
    shell:
        """
        module load GATK"
        java -Xmx8g -Djava.io.tmpdir=/lscratch/{{prefix}} -jar $GATK_HOME/GenomeAnalysisTK.jar \
        -T ApplyRecalibration \
        -R {input.ref} \
        -nt {threads} \
        -input {input.vcf} \
        -mode {params.mode} \
        -recalFile {input.recal} \
        --ts_filter_level 99.9 \
        -tranchesFile {input.tranches} \
        -o {output} >& {log}
        """