# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


"""
Rules for modifying SAM or BAM files.
Need samtools and picard-tools in your path.

For usage, include this in your workflow.
"""


__author__ = "Johannes KÃ¶ster (http://johanneskoester.bitbucket.org)"
__license__ = "MIT"

## {prefix} will include /{unit}/{unit}.bam 


rule bam_sort:
    input:
        "mapping/{prefix}.bam"
    output:
        temp("mapping/{prefix}.sorted.bam")
    shell:
        """
        module load samtools
        samtools sort {input} {wildcards.prefix}.sorted
        """

rule bam_stats:
    input:
        bam="mapping/{prefix}.bam",
        bai="mapping/{prefix}.bam.bai"
    output:
        "mapping/{prefix}.stats.txt"
    shell:
        """
        module load samtools
        samtools idxstats {input.bam} > {output}
        """


rule bam_measure_insert_size:
    input:
        "mapping/{prefix}.sorted.bam"
    output:
        txt="mapping/{prefix}.insert_size.txt",
        pdf="mapping/{prefix}.insert_size_histogram.pdf"
    shell:
        """
        module load picard
        java -Xmx8g -Djava.io.tmpdir=/lscratch/${{prefix}} -jar $PICARDJARPATH/picard.jar CollectInsertSizeMetrics \
        INPUT={input} \
        OUTPUT={output.txt} HISTOGRAM_FILE={output.pdf} 
        """

rule mark_duplicates:
    input:
        "mapping/{prefix}.sorted.bam"
    output:
        bam= "mapping/{prefix}.marked.duplicates.bam"
        metrics= "mapping/{prefix}.marked.duplicates.metrics.txt"
    shell:
        """
        module load picard
        java -Xmx8g -Djava.io.tmpdir=/lscratch/${{prefix}} -jar $PICARDJARPATH/picard.jar MarkDuplicates \
        INPUT= {input} \
        OUTPUT= {output.bam} \
        METRICS_FILE= {output.metrics}
        """
        
rule bam_index:
    input:
        "mapping/{prefix}.marked.duplicates.bam"
    output:
        "mapping/{prefix}.marked.duplicates.bam.bai"
    shell:
        """
        module load samtools
        samtools index {input}
        """

# rule fasta_index:
#     input:
#         "mapping/{prefix}.{suffix}"
#     output:
#         "mapping/{prefix}.{suffix,(fasta|fa)}.fai"
#     shell:
#         """
#         module load samtools
#         samtools faidx {input}
#         """
# 
# 
# rule fasta_dict:
#     input:
#         "mapping/{prefix}.fasta"
#     output:
#         "mapping/{prefix}.dict"
#     shell:
#         """
#         module load picard
#         java -Xmx8g -Djava.io.tmpdir=/lscratch/${{prefix}} -jar $PICARDJARPATH/picard.jar CreateSequenceDictionary \
#         REFERENCE={input} \
#         OUTPUT={output}
#         """


# rule sample_merge:
#     """
#     Merge bam files for multiple units into one for the given sample.
#     If the sample has only one unit, a symlink will be created.
#     """
#     input:
#         lambda wildcards: expand(
#             "mapping/{unit}.bam",
#             unit=config["samples"][wildcards.sample])
#     output:
#         "mapping/samples/{sample}.bam"
#     run:
#         if len(input) > 1:
#             
#             shell("module load samtools \ samtools merge {output} {input}")
#         else:
#             shell("ln -s {input} {output} && touch -h {output}")
