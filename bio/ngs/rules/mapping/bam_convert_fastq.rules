# vim: syntax=python tabstop=4 expandtab
# coding: utf-8

"""
Read mapping with BWA MEM (http://bio-bwa.sourceforge.net).

For usage, include this in your workflow.

Expects the global variable config
(see https://bitbucket.org/johanneskoester/snakemake/wiki/Documentation#markdown-header-configuration)
of at least the following structure, assuming that the desired reference sequence is some genome
to be found under the given path, and two units A and B have been sequenced with Illumina,
the first paired and the second single end:

{
    "references": {
        "genome": "path/to/genome.fasta"
    },
    "samples": {
        "A": ["A"],
        "B": ["B"]
    },
    "units": {
        "A":
            ["path/to/A_R1.fastq.gz", "path/to/A_R2.fastq.gz"],
        "B":
            ["path/to/B.fastq.gz"]
    },
    "platform": "Illumina",
    "params_bwa_mem": ""
}

Note the separation between samples and units that allows to have more than
one sequencing run for each sample, or multiple lanes per sample.
The "params_bwa_mem" entry is optional.
"""


__author__ = "Johannes KÃ¶ster (http://johanneskoester.bitbucket.org)"
__license__ = "MIT"


UNIT_TO_SAMPLE = {
    unit: sample for sample, units in config["samples"].items()
    for unit in units}


from snakemake.exceptions import MissingInputException


rule bam_fastq_bam:
    input:
        lambda wildcards: config["references"][wildcards.reference],
        lambda wildcards: config["units"][wildcards.unit]
    output:
        "mapping/{reference}/units/{unit}.bam"
    log:
        "mapping/log/{reference}/{unit}.log"
    threads: 8
    shell:
        """
        module load bwa
        module load samtools
        module load bedtools

        READGROUP=$(samtools view -H {input.bam} |grep @RG)

        samtools bamshuf -uOn 128 {input.bam} tmp |
        bamToFastq -i - -fq /dev/stdout -fq2 /dev/stdout |
        bwa mem -M -R $READGROUP -t 4 -p {input.ref} - 2>log |
        samtools view -Sbh - > {output}
        """
